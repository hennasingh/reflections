Reflection 01
What happens when you initialize a repository? Why do you need to do it?
when any repository gets initialized with with git init, a hidden metadeta .git file is created
which helps in keeping the track of all changes done to the files in the directory.

Reflection 02
How is the staging area different from the working directory and the repository?
What value do you think it offers?
staging area is a part of git and it keeps the files before a commit is done on it.Files can be added 
to staging area by using git add command and similarly git status can be used to check the status of the files.
while a working directory is a store of files which have not been committed yet after the changes have been made
while repository stores metadeta about all the history of the files since they were created.

Reflection 03
How can you use the staging area to make sure you have one commit per logical change?
I can use git diff commands to check the editions made to the code since last commit, i can check the status of the file and check 
differences between working directory and staging area as well.

Reflection 04
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
when we are experimenting with new features, we can make use of branches or if we want a different language or design or UI of the game,
we can add branches.

Reflection 05
How do the diagrams help you visualize the branch structure?
Diagram helps us know if there are linear or non-linear lists of commits, if there is a non-linear commit then its likely it wont come
under git log output, and it will be lost. The head is detached from the commit, this happens when we run the comman git checkout some-commitid, here the
head is detached from the master pointing towards a non-linear commit, to prevent that commit to get lost we can create a new branch with 
command git checkout -b new_branch_name equivalent to running 2 commands.

Reflection 06
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The merging of two branches results in combining all the commits done in them into one master branch. The diagram helps us know separate commits
done in two branches and if git diff command will work on them or not, the commits are all included into master as result of merge but at different time
stamps that they are done. one can know the diff of code added by command - git show commit-id.